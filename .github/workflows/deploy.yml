name: Build & Deploy PUBG Board

on:
  push:
    tags:
      - "release-v*"
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      # This step runs before docker build to ensure all necessary packages are installed
      - name: Install dependencies
        run: |
          npm ci
          npm install autoprefixer postcss tailwindcss --save-dev
      
      - name: Login to Ali Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.DOCKER_ALI_REGISTRY }}
          username: ${{ secrets.DOCKER_ALI_USERNAME }}
          password: ${{ secrets.DOCKER_ALI_PASSWORD }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_ALI_REGISTRY }}/tomorrowbye/pubg-board
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha,format=short
            type=raw,value=latest
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          context: .
          labels: ${{ steps.meta.outputs.labels }}
          file: ./Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PUBG_OPEN_API_KEY=${{ secrets.PUBG_OPEN_API_KEY }}
            PUBG_API_BASE_URL=${{ secrets.PUBG_API_BASE_URL }}
            NEXT_PUBLIC_DEFAULT_PLATFORM=${{ secrets.NEXT_PUBLIC_DEFAULT_PLATFORM }}
            NEXT_PUBLIC_DEFAULT_SHARD=${{ secrets.NEXT_PUBLIC_DEFAULT_SHARD }}
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            PUBG_API_CACHE_DURATION=${{ secrets.PUBG_API_CACHE_DURATION }}
            STEAM_OPEN_API_KEY=${{ secrets.STEAM_OPEN_API_KEY }}
            SUPABASE_PASSWORD=${{ secrets.SUPABASE_PASSWORD }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: success()
    steps:
      - name: Wait for image to be available
        run: sleep 60
        
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_SSH_HOST }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}
          username: ${{ secrets.DEPLOY_SSH_USERNAME }}
          password: ${{ secrets.DEPLOY_SSH_PASSWORD }}
          script_stop: true
          script: |
            cd /home/titan/titan-devops
            echo "Pulling latest image..."
            docker-compose -f ./docker-compose.yml pull pubg-board || { echo "Failed to pull image"; exit 1; }
            echo "Stopping container..."
            docker-compose -f ./docker-compose.yml stop pubg-board || true
            echo "Removing container..."
            docker-compose -f ./docker-compose.yml rm pubg-board -f || true
            echo "Starting new container..."
            docker-compose -f ./docker-compose.yml up pubg-board -d || { echo "Failed to start container"; exit 1; }
            echo "Cleaning up old images..."
            docker image prune -f
            echo "Deployment completed successfully!"